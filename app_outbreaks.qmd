---
title: "Pandemic- and epidemic-prone disease outbreaks in the world: 1996-2024"
format:
  dashboard:
    theme: lux
    scrolling: false 
    nav-buttons:
      - icon: twitter-x
        href: https://x.com/OutbreaksData
      - icon: github
        href: https://github.com/jatorresmunguia/disease_outbreak_news
server: shiny
---

<style>

.irs--shiny .irs-single {
    color: #fff;
    text-shadow: none;
    padding: 1px 3px;
    background-color: #CE1256;
    border-radius: 3px;
    font-size: 11px;
    line-height: 1.333;
    font-family: nunito sans;
}

.quarto-dashboard aside.sidebar {
    padding-left: 1em;
    padding-right: 1em;
    background-color: primary;
    color: #CE1256;
    font-family: nunito sans;
}

.irs--shiny .irs-handle {
    top: 17px;
    width: 22px;
    height: 22px;
    border: 1px solid #ababab;
    background-color: #CE1256;
    box-shadow: 1px 1px 3px rgb(205, 160, 205);;
    border-radius: 22px;
    z-index: 2;
}

.irs--shiny .irs-bar {
    top: 25px;
    height: 8px;
    border-top: 1px solid #428bca;
    border-bottom: 1px solid #428bca;
    background: #CE1256;
    cursor: s-resize;
    z-index: 2;
}

.card {
border: 0px;
}
 
.bslib-card .bslib-navs-card-title {
font-size: 14px;
}

.bslib-value-box .value-box-area {
    justify-content: center;
    padding: 0;
    font-size: .8rem;
    font-weight: 500;
}

.leaflet-container .leaflet-control-attribution, .leaflet-container .leaflet-control-scale {
font-size: 9px;
font-family: nunito sans;
}

.leaflet .legend {
font-family: nunito sans;
font-size: 9px;
}

</style>

```{r include=FALSE, message=FALSE, warning=FALSE, error=FALSE}
#| context: setup

library(shiny)
library(lubridate)
library(stringi)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(leaflet)
library(RColorBrewer)
library(htmltools)
library(sf)
library(bslib)
library(htmlwidgets)
library(shinythemes)
library(stringr)
library(reshape2)
library(leaflet)
library(leaflegend)
library(shinyWidgets)
library(shinydashboard)
library(sysfonts)
library(DT)
library(plotly)
library(ggplot2)

# Unique DONs
# Define the GitHub raw content URL
url_api <- "https://api.github.com/repos/jatorresmunguia/disease_outbreak_news/contents/Last%20update"
last_file <- fromJSON(content(GET(url_api), as = "text"))$name[grepl(fromJSON(content(GET(url_api), as = "text"))$name, pattern = paste0("^outbreaks"))]

rdata_file <- last_file[grepl(".csv$", last_file)]
file_name <- basename(rdata_file)
date_string <- sub(".*_(\\d{2})(\\d{2})(\\d{4}).*", "\\1-\\2-\\3", file_name)
date_obj <- dmy(date_string)

formatted_date <- format(date_obj, "%d/%m/%Y")  
formatted_month <- format(date_obj, "%B %d, %Y")     

outbreaks <- read.csv(paste0("https://raw.githubusercontent.com/jatorresmunguia/disease_outbreak_news/refs/heads/main/Last%20update", "/", rdata_file),
                      header = TRUE)

num_countries <- nlevels(factor(outbreaks$Country))
num_diseases <- nlevels(factor(outbreaks$icd104n))

outbreaks <- outbreaks |>
  mutate(across(c(icd104n, iso3, Country), 
                ~ factor(str_squish(as.character(.)))))

# geographic data all countries
# Load the shapefile into R
shpsf <- st_read("Data/shp_outbreaks.shp", quiet = TRUE) 

shpsf_unique <- shpsf |> 
  st_drop_geometry() |>
  distinct(iso3, .keep_all = TRUE)

outbreaks <- shpsf_unique |>
  select(iso3, continent) |>
  right_join(outbreaks, by = "iso3") 

rm(shpsf_unique, date_obj, date_string, file_name, last_file, rdata_file, url_api)

# For input Year
min_Year <- min(outbreaks$Year)
max_Year <- max(outbreaks$Year)

```

## Column {.sidebar}
```{r echo=FALSE, message=FALSE, warning=FALSE, error=FALSE}

div(
  br(),
  
  div(
    h6("Press PLAY or select a year"),
    style = "text-align: left; margin-bottom: 10px;"
  ),

  div(
    div(
      tags$div(class = "slider-animate-container", 
               style = "text-align: left; overflow-y: visible;",
               tags$a(href = "#", class = "slider-animate-button", 
                      `data-target-id` = "year_to_plot", 
                      `data-interval` = 5000,   
                      `data-loop` = FALSE, 
                      tags$span(class = "play", 
                                icon("circle-play", lib = "font-awesome", 
                                     style = "font-size: 30px;")  
                      ), 
                      tags$span(class = "pause", 
                                icon("circle-pause", lib = "font-awesome", 
                                     style = "font-size: 30px;")  
                      )
               )
      ),
      style = "flex: 0 0 15%; padding-right: 0px;"  
    ),
    div(
      sliderTextInput(
        inputId = "year_to_plot",
        label = NULL,
        grid = FALSE,
        force_edges = FALSE,
        choices = min_Year:max_Year,
        width = "95%"  
      ),
      style = "flex: 0 0 85%; padding-left: 5px; overflow-y: visible;"  
    ),
    style = "display: flex; align-items: center; overflow-y: visible;"  
  ),
  
  # Footer note at the bottom
  div(
    HTML('&#169; 2024 <a href="https://jatorresmunguia.github.io/disease-outbreaks-data.github.io/" target="_blank">Disease Outbreaks Data project</a>. 
          Website built with <a href="https://www.r-project.org/" target="_blank">R</a>, 
          <a href="https://www.shinyapps.io/" target="_blank">Shiny</a>, 
          and <a href="https://quarto.org/" target="_blank">Quarto</a> by Juan Armando Torres Mungu√≠a, PhD.'),
    style = "font-size: 12px; text-align: left; margin-top: auto; padding-top: 20px;"
  ),
  
  style = "display: flex; flex-direction: column; justify-content: space-between; height: 100%;"
)

```

## Column 
### Row {height="35%"}
#### Card {width="33%"}
```{r echo=FALSE, message=FALSE, warning=FALSE}
#| padding: 0px
#| expandable: true

value_box(
  title = "",
  value = HTML('<div style="display: flex; flex-direction: column; background-color: active;"> 
      <div class="text-center">
      <p><div id="value_time" class="shiny-text-output"></div></p> 
      </div></div>'),
  HTML('<div style="display: flex; flex-direction: column; background-color: active;"> 
      <div class="text-center">
      <p><div id="text_time" class="shiny-text-output"></div></p> 
      </div></div>'),
  showcase = plotlyOutput("ggplot_time"),
  #showcase_layout = "bottom",
  theme = value_box_theme(bg = "gray85", fg = "#CE1256")
  )

```

#### Card {width="33%"}
```{r echo=FALSE, message=FALSE, warning=FALSE}
#| padding: 0px
#| expandable: true

value_box(
  title = "",
  value = HTML('<div style="display: flex; flex-direction: column; background-color: active;"> 
      <div class="text-center">
      <p><div id="value_geographic" class="shiny-text-output"></div></p> 
      </div></div>'),
  HTML('<div style="display: flex; flex-direction: column; background-color: active;"> 
      <div class="text-center">
      <p><div id="text_geographic" class="shiny-text-output"></div></p> 
      </div></div>'),
  showcase = plotlyOutput("ggplot_geographic"),
  #showcase_layout = "bottom",
  theme = value_box_theme(bg = "gray85", fg = "#CE1256")
  )

```

#### Card {width="33%"}
```{r echo=FALSE, message=FALSE, warning=FALSE}
#| padding: 0px
#| expandable: true

value_box(
  title = "",
  value = HTML('<div style="display: flex; flex-direction: column; background-color: active;"> 
      <div class="text-center">
      <p><div id="value_disease" class="shiny-text-output"></div></p> 
      </div></div>'),
  HTML('<div style="display: flex; flex-direction: column; background-color: active;"> 
      <div class="text-center">
      <p><div id="text_disease" class="shiny-text-output"></div></p> 
      </div></div>'),
  showcase = plotlyOutput("ggplot_disease"),
  #showcase_layout = "bottom",
  theme = value_box_theme(bg = "gray85", fg = "#CE1256")
  )

```

### Row {.tabset height="60%"}
```{r echo=FALSE, message=FALSE, warning=FALSE}
#| padding: 0px
#| title: "Geographic distribution"

leafletOutput('diseaseMap_ggplot')

```

```{r}
#| padding: 10px
#| title: "Data"

DTOutput("data_table")

```

```{r}
#| padding: 10px
#| title: "Notes"

htmlOutput("notes")

```

```{r}
#| context: server

## Title 
output$title_dynamic <- renderText({
  
  paste0("The state of pandemic- and epidemic-prone disease outbreaks in the world, ", 
         input$year_to_plot)
  
  })

## Choropleth map
# Render the choropleth map in "Visualize the data" tabPanel
data_filter_leaflet <- reactive({
  
  # If only one year is selected, filter by that year
outbreaks |>
  filter(Year == input$year_to_plot) |>
  group_by(iso3) |>
  summarise(outbreaks = n(), .groups = 'drop') |>
  right_join(shpsf, by = "iso3") |>
  mutate(outbreaks = replace_na(outbreaks, 0)) |>
  st_as_sf()
  
  })

# Definir la paleta de colores basada en los bins ajustados
palette_adjusted <- reactive({
  colorNumeric(
    palette = "PuRd", 
    domain = data_filter_leaflet()$outbreaks,  # Usa el dominio reactivo
    na.color = "transparent"
    )
})
 
# Add map title
labels_adjusted <- reactive({
  
  leaflet_data <- data_filter_leaflet()  # Guarda el data frame filtrado
   
  paste0("<b>", leaflet_data$Country, "</b>", "<br/>",
         leaflet_data$outbreaks, " outbreaks") |> 
    lapply(htmltools::HTML)
  
})

output$diseaseMap_ggplot <- renderLeaflet({
  
leaflet(data_filter_leaflet(), options = leafletOptions(zoomControl = FALSE)) |>
    addTiles() |> 
    addProviderTiles(providers$Esri.WorldTopoMap) |>
    setView(lat = 10, lng = 0, zoom = 2) |>
    addPolygons(
      fillColor = ~palette_adjusted()(outbreaks),
      stroke = TRUE,
      fillOpacity = 0.9,
      color = "white",
      weight = 0.3,
      label = labels_adjusted(),
      labelOptions = labelOptions(
        style = list("font-weight" = "normal", 
                     padding = "3px 8px",
                     "font-family" = "nunito sans"),
        textsize = "9px", 
        direction = "auto"
        )
      ) |>
    addLegendNumeric(
      title = htmltools::tags$div('Outbreaks:',
    style = 'font-family: nunito sans; text-align: center; font-size: 11px;'),
      pal = palette_adjusted(), 
      values = data_filter_leaflet()$outbreaks, 
      position = "bottomleft",
      shape = "stadium",
      orientation = "horizontal",
      height = 20,
      width = 125,
      numberFormat = function(x) {
        prettyNum(x, format = "f", big.mark = ",", digits = 1, scientific = FALSE)
        }
      ) |>
    onRender("function(el, x) {
          L.control.zoom({position:'topright'}).addTo(this);
          }")

})

output$notes <- renderText({

HTML(paste0(
  "<div style='font-size: 11px;'>",
  "<div style='font-weight: bold; font-size: 11px;'>Methodological note</div>",
  "The unit of analysis in the database is an outbreak, defined as the occurrence of at least one case of a specific disease in a country -or territory- during a particular year. ",
  "Therefore, a country -or territory- cannot have more than one outbreak of the same disease in the same year, although it may experience outbreaks of different diseases within the same year. ",
  "A country can only have multiple outbreaks of the same disease if they occur in different years.",
  "<br><br>",
  "<div style='font-weight: bold; font-size: 11px;'>Time & geographic data coverage</div>",
  "The last version of the dataset contains information on ", nrow(outbreaks), " outbreaks.<br>",
  "Temporal coverage: 01/01/1996 - ", formatted_date, ".<br>",
  "Geographic coverage: ", num_countries, " countries/territories.<br>",
  "Number of diseases included: ", num_diseases, " diseases.",
  "<br><br>",
  "<div style='font-weight: bold; font-size: 11px;'>To read more about the data:</div>",
  "Torres Mungu√≠a, Badarau, D√≠az Pavez, Mart√≠nez-Zarzoso & Wacker. A global dataset of pandemic- and epidemic-prone disease outbreaks. Sci Data 9, 683 (2022).",
    "<a href='https://doi.org/10.1038/s41597-022-01797-2' target='_blank'> https://doi.org/10.1038/s41597-022-01797-2</a>",
  "</div>"
))

})

## Value box cards
total_outbreaks_year <- reactive(
  
  outbreaks |> 
    filter(Year == input$year_to_plot) |>
    nrow()
  
  )

# Geographic
continent_most_affected <- reactive(
  
  outbreaks |> 
    filter(Year == input$year_to_plot) |>
    # Group the data by continent
    group_by(continent) |> 
    # Add a count of occurrences per group (Year) without losing the data
    summarise(outbreaks = n(), .groups = 'drop') |> 
    arrange(desc(outbreaks)) |>
    slice_max(outbreaks, with_ties = TRUE)
  
  )

# Final title geographic
output$title_geographic <- renderText({
  
  if (nrow(continent_most_affected()) > 1) {
    continent_list <- paste(continent_most_affected()$continent[1:(nrow(continent_most_affected()) - 1)], collapse = ", ")
    last_continent <- continent_most_affected()$continent[nrow(continent_most_affected())]
    paste0(continent_list, " and ", last_continent, ", with approximately")
  } else {
    paste0(continent_most_affected()$continent, ", with approximately")
  } 
  
})

# value geographic
output$value_geographic <- renderText({
  
  paste0(round(sum(continent_most_affected()$outbreaks)/total_outbreaks_year()*100, 0), "%")   
  
})

# Final text geographic
output$text_geographic <- renderText({
  
    if (nrow(continent_most_affected()) > 1) {
    continent_list <- paste(continent_most_affected()$continent[1:(nrow(continent_most_affected()) - 1)], collapse = ", ")
    last_continent <- continent_most_affected()$continent[nrow(continent_most_affected())]
    paste0("of the disease outbreaks registered worldwide during ", input$year_to_plot, " were reported in ", continent_list, " and ", last_continent, ".")
  } else {
    paste0("of the disease outbreaks registered worldwide during ", input$year_to_plot, " were reported in ", continent_most_affected()$continent, ".")
  }

})

# Plot geographic
output$ggplot_geographic <- renderPlotly({
  
all_continent_year <- expand_grid(Year = unique(outbreaks$Year), continent = unique(outbreaks$continent))

total_per_continent <- outbreaks |>
  group_by(Year, continent) |> 
  summarise(outbreaks = n(), .groups = 'drop') |> 
  right_join(all_continent_year, by = c("Year", "continent")) |> 
  mutate(outbreaks = replace_na(outbreaks, 0)) |> 
  filter(Year == input$year_to_plot) |> 
  arrange(desc(outbreaks))

  plot_ly_bar(data = total_per_continent,
              x = ~continent, y = ~outbreaks, 
              type = 'bar',
              marker = list(color = "#CE1256", opacity = 0.7)
              )
  
  })

plot_ly_bar <- function(data, x, y, type, marker){
  
  info <- getCurrentOutputInfo()
  large <- isTRUE(info$height() > 200)
  
  plot_ly(data, x = x, y = y, type = type, marker = marker) |>
    layout(
      title = if(large){list(text=paste0("Distribution of disease outbreaks by continent in ", input$year_to_plot, "."), xanchor = 'center', yanchor =  'top')}else{""},
      xaxis = list(
        visible = large, 
        showgrid = F,         
        title = if(large){"Continent"}else{""}
      ),
      yaxis = list(
        visible = large, 
        showgrid = F, 
        title = if(large){"Total frequency of outbreaks"}else{""}
      ),
      hovermode = if(large){"x"}else{large},
      margin = list(t = if(large){50}else{0}, r = 0, l = 0, b = 0),
      font = list(color = "#CE1256"),
      paper_bgcolor = "transparent",
      plot_bgcolor = "transparent"
      ) |> 
    config(displayModeBar = F) 
  }

# Time trends 
Year_number_outbreaks <- reactive(
  
  outbreaks |> 
    # Group the data by Year
    group_by(Year) |> 
    # Add a count of occurrences per group (Year) without losing the data
    summarise(outbreaks = n(), .groups = 'drop')  
    
)

# Final title time
output$title_time <- renderText({
  
  paste0("In ", input$year_to_plot, ", the number of disease outbreaks was")

})

# value time
output$value_time <- renderText({
  
  paste0(Year_number_outbreaks()[Year_number_outbreaks()$Year==input$year_to_plot, "outbreaks"])  
  
})

# Final text time
output$text_time <- renderText({
  
  value_year <- Year_number_outbreaks()[Year_number_outbreaks()$Year==input$year_to_plot, "outbreaks"]
  value_previous <- if(input$year_to_plot != 1996){Year_number_outbreaks()[Year_number_outbreaks()$Year==(input$year_to_plot-1), "outbreaks"]}
  value_total <- sum(Year_number_outbreaks()$outbreaks)
  
  if(input$year_to_plot == 1996){
    paste0("disease outbreaks were registered during ", input$year_to_plot," worldwide.") 
  }else{
    paste0("disease outbreaks were registered during ", input$year_to_plot," worldwide. ",
           if(value_previous>value_year){paste0(
             "A decrease of ", abs(round((value_year-value_previous)/value_previous*100, 0)), "% compared to the previous year."
             )}, 
           if(value_previous<value_year){paste0(
             "An increase of ", round((value_year-value_previous)/value_previous*100, 0), "% compared to the previous year."
             )}, 
           if(value_previous==value_year){paste0(
             "No significant change compared to the previous year."
             )})
    
  }
})

#
output$ggplot_time <- renderPlotly({
  
plot_ly_lines(Year_number_outbreaks(),
               x = ~Year, y = ~outbreaks)
  
  })

plot_ly_lines <- function(data, x, y){
  
  info <- getCurrentOutputInfo()
  large <- isTRUE(info$height() > 200)
  
  plot_ly(data, x = x, y = y) |>
  add_lines(
    color = I("#CE1256"), 
    span = I(1),
    fill = 'tozeroy', 
    alpha = 0.2
    ) |> 
  layout(
    title = if(large){list(text=paste0("Yearly disease outbreaks from ", min_Year, " to ", max_Year, "."), xanchor = 'center', yanchor =  'top')}else{""},
    xaxis = list(
      visible = large, 
      showgrid = F, 
      title = if(large){"Year"}else{""}
      ),
    yaxis = list(
      visible = large, 
      showgrid = F, 
      title = if(large){"Total frequency of outbreaks"}else{""}
      ),
    hovermode = if(large){"x"}else{large},
    margin = list(t = if(large){50}else{0}, r = 0, l = 0, b = 0),
    font = list(color = "#CE1256"),
    paper_bgcolor = "transparent",
    plot_bgcolor = "transparent"
    ) |> 
    config(displayModeBar = F) 
  
  }
 
# Disease
disease_outbreaks <- reactive(
  
  outbreaks |> 
    filter(Year == input$year_to_plot) |>
    # Group the data by Year
    group_by(icd104n) |> 
    # Add a count of occurrences per group (Year) without losing the data
    summarise(outbreaks = n(), .groups = 'drop') |> 
    arrange(desc(outbreaks)) |>
    slice_max(outbreaks, with_ties = TRUE)  
  
)

# Final title disease
output$title_disease <- renderText({
  
  if (nrow(disease_outbreaks()) > 1) {
    disease_list <- paste(disease_outbreaks()$icd104n[1:(nrow(disease_outbreaks()) - 1)], collapse = ", ")
    last_disease <- disease_outbreaks()$icd104n[nrow(disease_outbreaks())]
    paste0(disease_list, " and ", last_disease, " accounted for")
  } else {
    paste0(disease_outbreaks()$icd104n, " accounted for")
  } 
  
})

# value disease
output$value_disease <- renderText({
  
  paste0(round(sum(disease_outbreaks()$outbreaks)/total_outbreaks_year()*100, 0), "%")   
  
})

# Final text disease
output$text_disease <- renderText({
  
    if (nrow(disease_outbreaks()) > 1) {
    disease_list <- paste(disease_outbreaks()$icd104n[1:(nrow(disease_outbreaks()) - 1)], collapse = ", ")
    last_disease <- disease_outbreaks()$icd104n[nrow(disease_outbreaks())]
    paste0("of all outbreaks registered worldwide in ", input$year_to_plot, ", were associated with ", disease_list, " and ", last_disease, ".")
  } else {
    paste0("of all outbreaks registered worldwide in ", input$year_to_plot, ", were associated with ", disease_outbreaks()$icd104n, ".")
  } 
  
})

# Plot disease
output$ggplot_disease <- renderPlotly({
  
  total_per_disease <- outbreaks |>
    filter(Year == input$year_to_plot) |>
    group_by(icd104n) |>
    summarise(outbreaks = n(), .groups = 'drop') |>
    arrange(desc(outbreaks)) |>
    mutate(icd104n = if_else(row_number() <= 4, icd104n, "Other")) |>
    group_by(icd104n) |>
    summarise(outbreaks = sum(outbreaks), .groups = 'drop') |>
    arrange(desc(outbreaks))
  
  plot_ly_pie(data = total_per_disease, 
        labels = ~icd104n, 
        values = ~outbreaks, 
        type = 'pie',
        opacity = 0.7,
        marker = list(
          colors = c("#CE1256", "#D73027", "#F46D43", "#FDAE61", "#FEE08B")
          )
        ) 
  
  })

plot_ly_pie <- function(data, labels, values, type, opacity, marker){
            
  info <- getCurrentOutputInfo()
  large <- isTRUE(info$height() > 200)
    
    plot_ly(data, labels = labels, values = values, type = type, opacity = opacity, marker = marker, textposition = if(large){"inside"}else{large}, texttemplate = if(large){"%{label}: %{value} <br>(%{percent})"}else{""}) |> 
      layout(
        title = if(large){list(text=paste0("Five most frequent diseases in outbreaks for ", input$year_to_plot, "."), xanchor = 'center', yanchor =  'top')}else{""},
        xaxis = list(
          visible = large, 
          showgrid = F, 
          title = ""
          ),
        yaxis = list(
          visible = large, 
          showgrid = F, 
          title = ""
          ),
        hovermode = if(large){"x"}else{large},
        showlegend = FALSE,
        margin = list(t = if(large){50}else{0}, r = 0, l = 0, b = 0),
        font = list(color = "#CE1256"),
        paper_bgcolor = "transparent",
        plot_bgcolor = "transparent"
      ) |> 
    config(displayModeBar = F) 
    
    }

## Data table
# DT table
output$data_table <- renderDT({
  
  outbreaks_sub <- outbreaks |>
    filter(Year == input$year_to_plot) |>
    select(Year, Country, continent, icd104n)
  
    datatable(outbreaks_sub, 
              colnames = c("Year", "Country", "Continent", "Disease"),  
              rownames = FALSE, 
              filter = 'top',
              class = 'row-border hover stripe',
              extensions = 'Buttons',  
            options = list(
              initComplete = htmlwidgets::JS(
          "function(settings, json) {",
          paste0("$(this.api().table().container()).css({'font-size': '", "10pt", "'});"),
          "}"),
          dom = 'Bfrtip', 
              buttons = c('copy', 'csv', 'excel', 'pdf'),
              order = list(list(1, 'asc'), list(3, 'desc'))
              )
            )

  }, 
  server = FALSE
)

```
